package com.google.firebase.firestore.local;

import com.google.firebase.firestore.model.BasePath;
import com.google.firebase.firestore.model.ResourcePath;
import com.google.firebase.firestore.util.Assert;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

final class EncodedPath {
    EncodedPath() {
    }

    /* renamed from: a */
    private static List<String> m75288a(String str) {
        int length = str.length();
        Assert.m76443d(length >= 2, "Invalid path \"%s\"", str);
        if (length == 2) {
            Assert.m76443d(str.charAt(0) == 1 && str.charAt(1) == 1, "Non-empty path \"%s\" had length 2", str);
            return Collections.emptyList();
        }
        int length2 = str.length() - 2;
        ArrayList arrayList = new ArrayList();
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < length) {
            int indexOf = str.indexOf(1, i);
            if (indexOf < 0 || indexOf > length2) {
                throw new IllegalArgumentException("Invalid encoded resource path: \"" + str + "\"");
            }
            int i2 = indexOf + 1;
            char charAt = str.charAt(i2);
            if (charAt == 1) {
                String substring = str.substring(i, indexOf);
                if (sb.length() != 0) {
                    sb.append(substring);
                    substring = sb.toString();
                    sb.setLength(0);
                }
                arrayList.add(substring);
            } else if (charAt == 16) {
                sb.append(str.substring(i, indexOf));
                sb.append(0);
            } else if (charAt == 17) {
                sb.append(str.substring(i, i2));
            } else {
                throw new IllegalArgumentException("Invalid encoded resource path: \"" + str + "\"");
            }
            i = indexOf + 2;
        }
        return arrayList;
    }

    /* renamed from: b */
    static ResourcePath m75289b(String str) {
        return ResourcePath.m75902s(m75288a(str));
    }

    /* renamed from: c */
    static <B extends BasePath<B>> String m75290c(B b) {
        StringBuilder sb = new StringBuilder();
        int n = b.mo62807n();
        for (int i = 0; i < n; i++) {
            if (sb.length() > 0) {
                m75292e(sb);
            }
            m75291d(b.mo62803j(i), sb);
        }
        m75292e(sb);
        return sb.toString();
    }

    /* renamed from: d */
    private static void m75291d(String str, StringBuilder sb) {
        int length = str.length();
        for (int i = 0; i < length; i++) {
            char charAt = str.charAt(i);
            if (charAt == 0) {
                sb.append(1);
                sb.append(16);
            } else if (charAt != 1) {
                sb.append(charAt);
            } else {
                sb.append(1);
                sb.append(17);
            }
        }
    }

    /* renamed from: e */
    private static void m75292e(StringBuilder sb) {
        sb.append(1);
        sb.append(1);
    }

    /* renamed from: f */
    static String m75293f(String str) {
        StringBuilder sb = new StringBuilder(str);
        int length = sb.length() - 1;
        char charAt = sb.charAt(length);
        Assert.m76443d(charAt == 1, "successor may only operate on paths generated by encode", new Object[0]);
        sb.setCharAt(length, (char) (charAt + 1));
        return sb.toString();
    }
}
